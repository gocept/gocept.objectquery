==============================================
Querying objects with regular path expressions
==============================================

Create QueryProcessor and initialize the ObjectCollection
---------------------------------------------------------

You create a QueryProcessor like this:

    >>> from gocept.objectquery.pathexpressions import RPEQueryParser
    >>> from gocept.objectquery.collection import ObjectCollection
    >>> from gocept.objectquery.processor import QueryProcessor
    >>> parser = RPEQueryParser()
    >>> objects = ObjectCollection()
    >>> query = QueryProcessor(parser, objects)
    >>> query
    <gocept.objectquery.processor.QueryProcessor object at 0x...>

Fill the collection with some examples:

    >>> class Telephone(object):
    ...     def __init__(self, ref=None, number=""):
    ...         if ref is None: ref = []
    ...         self.ref = ref
    ...         self.number = number
    >>> class Person(object):
    ...     def __init__(self, ref=None, name=""):
    ...         if ref is None: ref = []
    ...         self.ref = ref
    ...         self.name = name
    >>> class Address(object):
    ...     def __init__(self, ref=None, street="", etage=""):
    ...         if ref is None: ref = []
    ...         self.ref = ref
    ...         self.street = street
    ...         self.etage = etage

Now fill the classes with some data:

    >>> t1 = Telephone(number="22988912")
    >>> t2 = Telephone(number="2298890")
    >>> t3 = Telephone(number="2298891")
    >>> p1 = Person(name="Theuni")
    >>> p2 = Person(name="Basti", ref=[t1])
    >>> p3 = Person(name="coco", ref=[t2, t3])
    >>> a1 = Address(street="Meckelstrasse", etage="2")
    >>> a2 = Address(street="Forsterstrasse", etage="2", ref=[p1, p2])
    >>> a3 = Address(street="Forsterstrasse", etage="1", ref=[p3])
    >>>
    >>> objects.index(a1)
    >>> objects.index(a2)
    >>> objects.index(a3)

Some example usecases
---------------------

Root joins:

    >>> r = query('/Address')
    >>> len(r)
    3
    >>> r = query('/Telephone')
    >>> len(r)
    0

Give all Telephones that are direct childs of Adresses:

    >>> r = query('Address/Telephone')
    >>> len(r)
    0

Give the Telephone of all Persons named "coco":

    >>> r = query('Address/Person[@name="coco"]/Telephone')
    >>> len(r)
    2
    >>> r[0].number
    '2298890'

Give all Persons, that live in "Forsterstrasse":

    >>> r = query('Address[@street="Forsterstrasse"]/Person*')
    >>> len(r)
    3

Give the Telephones of Persons who live *alone* at Forsterstrasse:

    >>> r = query('Address[@street="Forsterstrasse"]/Person?/Telephone')
    >>> len(r)
    2
    >>> r[0].number
    '2298890'

Handle Wildcards correctly:

    >>> r = query('/Address/_*/Telephone')
    >>> len(r)
    3

What about precedence:

    >>> r = query('/Address[@street="Forsterstrasse"]/Person/Telephone')
    >>> len(r)
    3
    >>> r = query('(/Address[@street="Forsterstrasse"]/Person)/Telephone')
    >>> len(r)
    3
    >>> r = query('/Address[@street="Forsterstrasse"]/(Person/Telephone)')
    >>> len(r)
    0
    >>> r = query('(/Address/Person[@name="Basti"])/(Person/Telephone)')
    >>> len(r)
    1


But pay attention. If you change the query from .."]/(Pers.. to .."](/Pers..
you get an Address-Result with street name "Forsterstrasse":

    >>> r = query('/Address[@street="Forsterstrasse"](/Person/Telephone)')
    >>> len(r)
    2
    >>> r[0].street
    'Forsterstrasse'

Unions:

    >>> r = query('(/Address[@street="Forsterstrasse"])|(Person/Telephone)')
    >>> len(r)
    5
    >>> r = query('(/Address)|(Person[@name="Basti"])')
    >>> len(r)
    4

Advanced usecases
-----------------

Remove ``t2`` from ``p3`` and add it to ``p1``:

    >>> r = query('Person[@name="coco"]/Telephone')
    >>> len(r)
    2
    >>> r = query('Person[@name="Theuni"]/Telephone')
    >>> len(r)
    0

    >>> p3.ref.remove(t2)
    >>> objects.remove(t2, p3)
    >>> p1.ref.append(t2)
    >>> objects.add(t2, p1)

    >>> r = query('Person[@name="coco"]/Telephone')
    >>> len(r)
    1
    >>> r = query('Person[@name="Theuni"]/Telephone')
    >>> len(r)
    1

Add same object more than once:

    >>> p3.ref.append(t2)
    >>> objects.add(t2, p3)
    >>> r = query('Person/Telephone')
    >>> r
    [<Telephone object at 0x...>, <Telephone object at 0x...>, <Telephone object at 0x...>, <Telephone object at 0x...>]

``r[0]`` and ``r[3]`` are now both t2 one and the same object:

    >>> id(r[0]) == id(r[3])
    True
    >>> id(r[1]) == id(r[3])
    False

Problems
--------

Get Adresses with zero or one Person. This cannot be queries with RPE, because
you cannot query for elements with conditions in subsequent elements. In the
following example you *want* to get 2 address objects, but you *get* one
person object:

    >>> r = query('/Address/Person?')
    >>> len(r)
    1
