==============================================
Querying objects with regular path expressions
==============================================

Initialization
==============

First load the test database. For more information about that, please have a
look inside testobjects.py.

    >>> from gocept.objectquery.testobjects import *
    >>> from pprint import pprint

Create QueryProcessor and initialize the ObjectCollection
=========================================================

You create a QueryProcessor like this:

    >>> from gocept.objectquery.pathexpressions import RPEQueryParser
    >>> from gocept.objectquery.collection import ObjectCollection
    >>> from gocept.objectquery.processor import QueryProcessor
    >>> parser = RPEQueryParser()
    >>> objects = ObjectCollection(conn)
    >>> query = QueryProcessor(parser, objects)
    >>> query
    <gocept.objectquery.processor.QueryProcessor object at 0x...>

Now fill the indexes with the data from the test database:

    >>> objects.add(librarydb._p_oid)

Some example usecases
---------------------

Root joins:

    >>> r = query('/Library')
    >>> sorted(elem.location for elem in r)
    ['Berlin', 'Chester', 'Halle']

    >>> r = query('/Book')
    >>> len(r)
    0

Search for all Persons that are direct childs of Libraries:

    >>> r = query('/Library/Person')
    >>> len(r)
    0

Search for the authors of all Books named "Fause":

    >>> r = query('/Library/Book[@title="Faust"]/Person')
    >>> sorted(elem.name for elem in r)
    ['Johann Wolfgang von Goethe']

Search for all books written after year 2000:

    >>> r = query('/Library/Book[@written>=2000]')
    >>> len(r)
    3
    >>> pprint(sorted(elem.title for elem in r))
    ['Farm der Tiere',
     'Plone-Benutzerhandbuch',
     'Web Component Development with Zope 3']

Search for all authors of books written after year 2000:

    >>> r = query('/Library/Book[@written>=2000]/Person')
    >>> len(r)
    3
    >>> pprint(sorted(elem.name for elem in r))
    ['George Orwell', 'Philipp von Weitershausen', 'Thomas Lotze']

Search for all Books, that have are located in Halle and have been written in
2007:

    >>> r = query('/Library[@location="Halle"]/Book[@written==2007]')
    >>> sorted((elem.title, elem.isbn) for elem in r)
    [('Web Component Development with Zope 3', 3540338071L)]

Handle Wildcards correctly:

    >>> r = query('/Library/_/Person')
    >>> pprint(sorted(elem.name for elem in r))
    ['George Orwell',
     'Johann Wolfgang von Goethe',
     'Philipp von Weitershausen',
     'Thomas Lotze']

What about precedence:

    >>> r = query('/Library[@location="Halle"]/Book/Person')
    >>> pprint(sorted(elem.name for elem in r))
    ['George Orwell', 'Philipp von Weitershausen', 'Thomas Lotze']

    >>> r = query('(/Library[@location="Halle"]/Book)/Person')
    >>> pprint(sorted(elem.name for elem in r))
    ['George Orwell', 'Philipp von Weitershausen', 'Thomas Lotze']

    >>> r = query('/Library[@location="Halle"]/(Book/Person)')
    >>> len(r)
    0
    >>> r = query('(/Library/Book[@title="Faust"])/(Book/Person)')
    >>> sorted(elem.name for elem in r)
    ['Johann Wolfgang von Goethe']

But pay attention. If you change the query from .."]/(Book.. to .."](/Book..
you get an Library-Result with location in "Halle". This is, because the
subquery (in brakets) returns no results:

    >>> r = query('/Library[@location="Halle"](/Book/Person)')
    >>> len(r)
    1
    >>> r[0].location
    'Halle'

Unions:

    >>> r = query('(/Library[@location="Halle"])|(Book/Person)')
    >>> len(r)
    5
    >>> pprint(sorted(elem for elem in r))
    [<gocept.objectquery.testobjects.Library object at 0x...>,
     <gocept.objectquery.testobjects.Person object at 0x...>,
     <gocept.objectquery.testobjects.Person object at 0x...>,
     <gocept.objectquery.testobjects.Person object at 0x...>,
     <gocept.objectquery.testobjects.Person object at 0x...>]

    >>> r = query('(/Library)|(Book[@written=1990])')
    >>> len(r)
    4
    >>> pprint(sorted(elem for elem in r))
    [<gocept.objectquery.testobjects.Book object at 0x...>,
     <gocept.objectquery.testobjects.Library object at 0x...>,
     <gocept.objectquery.testobjects.Library object at 0x...>,
     <gocept.objectquery.testobjects.Library object at 0x...>]


Kleene Closure
--------------

First we need a new database:

    >>> dbroot.clear()
    >>> transaction.commit()

    >>> objects = ObjectCollection(conn)
    >>> query = QueryProcessor(parser, objects)

    >>> doc1 = Document()
    >>> doc2 = Document()
    >>> doc3 = Document()
    >>> fol4 = Folder([doc2])
    >>> fol3 = Folder([doc1])
    >>> fol2 = Folder([fol3])
    >>> fol1 = Folder([fol2])
    >>> plo1 = Plone([fol1, fol4, doc3])
    >>> root = Root([plo1])

    >>> dbroot['test'] = root
    >>> transaction.commit()
    >>> objects.add(root._p_oid)

Now there should be one Plone object under root:

    >>> r = query('/Plone')
    >>> len(r) == 1 and r[0] == plo1
    True

    >>> r = query('/Plone/Folder/Document')
    >>> len(r)
    1
    >>> r[0] == doc2
    True

Get all Documents which are under any number of Folders:

    >>> r = query('/Plone/Folder*/Document')
    >>> r[0] != r[1] != r[2] and isinstance(r[0], Document)
    True

    >>> r = query('Plone/Folder*/Document')
    >>> r[0] != r[1] != r[2] and isinstance(r[0], Document)
    True

    >>> r = query('Folder*/Document')
    >>> r[0] != r[1] != r[2] and isinstance(r[0], Document)
    True

Get all Documents which are under one or zero number of Folders:

    >>> r = query('/Plone/Folder?/Document')
    >>> len(r) == 2 and (r[0] == doc2 or r[1] == doc2) and (r[0] == doc3 or r[1] == doc3) and r[0] != r[1]
    True

    >>> r = query('Folder?/Document')
    >>> len(r) == 3 and r[0] != r[1] != r[2]
    True

Get all Documents which are under one or more number of Folders:

    >>> r = query('/Plone/Folder+/Document')
    >>> len(r) == 2 and (r[0] == doc1 or r[1] == doc1) and (r[0] == doc2 or r[1] == doc2) and r[0] != r[1]
    True

    >>> r = query('Folder+/Document')
    >>> len(r) == 2 and (r[0] == doc1 or r[1] == doc1) and (r[0] == doc2 or r[1] == doc2) and r[0] != r[1]
    True

You may also query absolute pathlenghts:

    >>> len(query('Plone/Document'))
    1
    >>> len(query('Plone/Folder/Document'))
    1
    >>> len(query('Plone/Folder/Folder/Document'))
    0
    >>> len(query('Plone/Folder/Folder/Folder/Document'))
    1

Furthermore, it is possible to query all Documents, which are located under 2
or more Folders:

    >>> r = query('Plone/Folder+/Folder/Document')
    >>> len(r) == 1 and r[0] == doc1
    True

    >>> r = query('Plone/Folder/Folder+/Document')
    >>> len(r) == 1 and r[0] == doc1
    True

A special case is the combination of wildcard and '*' closure:

    >>> r = query('Plone/_*/Document')
    >>> len(r) == 3
    True
