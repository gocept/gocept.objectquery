======================
Using ObjectCollection
======================

Imporing the ObjectCollection
=============================

You can import the QueryParser as follow:

    >>> from gocept.objectquery.collection import ObjectCollection

Get a ObjectCollection:

    >>> oc = ObjectCollection()

Using the ObjectCollection
==========================

First create some example classes:

    >>> class Telephone(object):
    ...     pass
    >>> class Person(object):
    ...     pass
    >>> class AddressBook(object):
    ...     pass

Add some objects to the collection:

    >>> oc.add(Telephone())
    >>> oc.add(AddressBook())
    >>> oc.add(AddressBook())
    >>> oc.add(Person())
    >>> oc.add(AddressBook())
    >>> oc.add(Telephone())
    >>> oc.all()
    [<Telephone object at 0x...>, <AddressBook object at 0x...>, <AddressBook object at 0x...>, <Person object at 0x...>, <AddressBook object at 0x...>, <Telephone object at 0x...>]

Now use the init functionality:

    >>> oci = ObjectCollection([Telephone(), AddressBook()])
    >>> oci.all()
    [<Telephone object at 0x...>, <AddressBook object at 0x...>]

Search by classname:

    >>> oc.by_class("Telephone")
    [<Telephone object at 0x...>, <Telephone object at 0x...>]
    >>> oc.by_class("AddressBook")
    [<AddressBook object at 0x...>, <AddressBook object at 0x...>, <AddressBook object at 0x...>]

We need some attribute values to look for:

    >>> class Telephone(object):
    ...     def __init__(self, number=""):
    ...         self.number = number
    ...     def __call__(self, number):
    ...         self.__init__(number)
    >>> oc.add(Telephone(number="+49345122988912"))
    >>> oc.add(Telephone(number="+4934512298891"))
    >>> oc.add(Telephone(number="+4934512298892"))

Now get the objects with that number:

    >>> oc.by_attr("number", "+49345122988912")
    [<Telephone object at 0x...>]
