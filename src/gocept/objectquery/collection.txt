======================
Using ObjectCollection
======================

Imporing the ObjectCollection
=============================

You can import the QueryParser as follow:

    >>> from gocept.objectquery.collection import ObjectCollection

Get a ObjectCollection:

    >>> oc = ObjectCollection()

Using the ObjectCollection
==========================

First create some example classes. All have the attribute "__ns__" which is
a namespace tupel which consists of (order, size) variables.

    >>> class Telephone(object):
    ...     def __init__(self, number="", ref=None):
    ...         if ref is None:
    ...           ref = []
    ...         self.ref = ref
    ...         self.number = number
    >>> class Person(object):
    ...     def __init__(self, name="", ref=None):
    ...         if ref is None:
    ...           ref = []
    ...         self.ref = ref
    ...         self.name = name
    >>> class Address(object):
    ...     def __init__(self, street="", city="", ref=None):
    ...         if ref is None:
    ...           ref = []
    ...         self.ref = ref
    ...         self.street = street
    ...         self.city = city

Add some objects to the collection:

    >>> t1 = Telephone(number="22988912")
    >>> t2 = Telephone(number="22988913")
    >>> p1 = Person(name="Sebastian")
    >>> p1.ref = [t1, t2]
    >>> a1 = Address(street="Meckelstrasse", city="Halle")
    >>> a1.ref = [p1]
    >>> oc.index(a1)
    >>> oc.all()
    [<Address object at 0x...>, <Person object at 0x...>, <Telephone object at 0x...>, <Telephone object at 0x...>]

Search by classname:

    >>> oc.by_class("Telephone")
    [<Telephone object at 0x...>, <Telephone object at 0x...>]
    >>> oc.by_class("Address")
    [<Address object at 0x...>]

Now search for some object attributes:

    >>> oc.by_attr("number", "22988912")
    [<Telephone object at 0x...>]
    >>> oc.by_attr("city", "Halle")
    [<Address object at 0x...>]
    >>> oc.by_attr("street", "")
    []

You may want to get some values:

    >>> oc.get_value("street")
    ['Meckelstrasse']
    >>> oc.get_value("name")
    ['Sebastian']

Adding and removing equal objects multiple times
------------------------------------------------

First we need a new ObjectCollection:

    >>> oc2 = ObjectCollection()

Then we generate a tree structure with one Address as root, followed by two
equal Persons. Person is followed by two equal Telephones:

    >>> tele = Telephone()
    >>> pers = Person(ref=[tele, tele])
    >>> addr = Address(ref=[pers, pers])
    >>> oc2.index(addr)

Now we have 4 Telephone objects as leaves:

    >>> len(oc2._namespace[tele])
    4

Add another Telephone (the same as added above) to Person:

    >>> pers.ref.append(tele)
    >>> oc2.add(tele, pers)

Now we have 6 Telephone objects as leaves:

    >>> len(oc2._namespace[tele])
    6

Now add Address for a second time to the Collection:

    >>> oc2.index(addr)

Now we have 2 Address, 4 Person and 12 Telephone objects as leaves:

    >>> len(oc2._namespace[addr])
    2
    >>> len(oc2._namespace[pers])
    4
    >>> len(oc2._namespace[tele])
    12

Now add a third and fourth Person to Address:

    >>> addr.ref.append(pers)
    >>> oc2.add(pers, addr)
    >>> addr.ref.append(pers)
    >>> oc2.add(pers, addr)

There are now 8 Person (every 4 under Address) and 24 Telephone objects:

    >>> len(oc2._namespace[pers])
    8
    >>> len(oc2._namespace[tele])
    24

Last add a third Address into the Collection:

    >>> oc2.index(addr)

There are now 12 Person and 36 Telephone objects:

    >>> len(oc2._namespace[pers])
    12
    >>> len(oc2._namespace[tele])
    36

Add another Telephone (the same as added above) to Person:

    >>> pers.ref.append(tele)
    >>> oc2.add(tele, pers)

There are now 12 Person and 48 Telephone objects:

    >>> len(oc2._namespace[pers])
    12
    >>> len(oc2._namespace[tele])
    48

Remove the Person from Address object:

    >>> addr.ref.remove(pers)
    >>> oc2.remove(pers, addr)

As the Telephones are removed with the Persons, we now have no Telephone
leaves:

    >>> len(oc2._namespace[tele])
    Traceback (most recent call last):
    ...
    KeyError: <Telephone object at 0x...>

Dynamic namespace expansion
---------------------------

To test the dynamic namespace expansion we first need a new ObjectCollection
with a very minimal but senseful MAX_HEIGHT value:

    >>> oc3 = ObjectCollection(init_namespace=(3, 3))

We now need four classes:

    >>> class First(object):
    ...     pass
    >>> class Second(object):
    ...     pass
    >>> class Third(object):
    ...     pass
    >>> class Fourth(object):
    ...     pass

And will set them now in a hirachical order:

    >>> fir = First()
    >>> oc3.index(fir)
    >>> sec = Second()
    >>> oc3.add(sec, fir)
    >>> thi = Third()
    >>> oc3.add(thi, sec)
    >>> fou = Fourth()
    >>> oc3.add(fou, thi)

The namespace of First is a normal namespace value:

    >>> oc3._namespace[fir]
    [[(2, 8)]]

Second() has an extended namespace:

    >>> oc3._namespace[sec]
    [[(3, 1), (1, 28)]]

Third() has an extended namespace, too, within the namespace of Second():

    >>> oc3._namespace[thi]
    [[(3, 1), (2, 8)]]

Fourth() has a more extended namespace, Third() and Second():

    >>> oc3._namespace[fou]
    [[(3, 1), (3, 1), (1, 28)]]
