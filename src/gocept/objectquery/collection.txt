======================
Using ObjectCollection
======================

Imporing the ObjectCollection
=============================

You can import the QueryParser as follow:

    >>> from gocept.objectquery.collection import ObjectCollection

Get a ObjectCollection:

    >>> oc = ObjectCollection()

Using the ObjectCollection
==========================

How to add objects to the ObjectCollection
------------------------------------------

ObjectCollection is looking inside objects for other objects. You have the
following possibilities to add preceding objects.

    >>> class Child(object):
    ...     pass

Tupels:

    >>> class Parent(object):
    ...     def __init__(self):
    ...         self.ref_tupel = (Child(), Child())
    >>> obj = Parent()
    >>> oc.add(obj)
    >>> oc.root() == obj
    True
    >>> oc.remove(oc.root())

Lists:

    >>> class Parent(object):
    ...     def __init__(self):
    ...         self.ref_list = [Child(), Child()]
    >>> obj = Parent()
    >>> oc.add(obj)
    >>> oc.remove(oc.root())

Dictionaries:

    >>> class Parent(object):
    ...     def __init__(self):
    ...         self.ref_dict = {"elem1": Child(), "elem2": Child()}
    >>> obj = Parent()
    >>> oc.add(obj)
    >>> oc.remove(oc.root())

Variables:

    >>> class Parent(object):
    ...     def __init__(self):
    ...         self.ref_var = Child()
    >>> obj = Parent()
    >>> oc.add(obj)
    >>> oc.remove(oc.root())

Example usage of ObjectCollection
---------------------------------

First create some example classes. All have the attribute "__ns__" which is
a namespace tupel which consists of (order, size) variables.

    >>> class Telephone(object):
    ...     def __init__(self, number="", ref=None):
    ...         if ref is None:
    ...           ref = []
    ...         self.ref = ref
    ...         self.number = number
    >>> class Person(object):
    ...     def __init__(self, name="", ref=None):
    ...         if ref is None:
    ...           ref = []
    ...         self.ref = ref
    ...         self.name = name
    >>> class Address(object):
    ...     def __init__(self, street="", city="", ref=None):
    ...         if ref is None:
    ...           ref = []
    ...         self.ref = ref
    ...         self.street = street
    ...         self.city = city

Add some objects to the collection:

    >>> t1 = Telephone(number="22988912")
    >>> t2 = Telephone(number="22988913")
    >>> p1 = Person(name="Sebastian")
    >>> p1.ref = [t1, t2]
    >>> a1 = Address(street="Meckelstrasse", city="Halle")
    >>> a1.ref = [p1]
    >>> oc.add(a1)
    >>> oc.all()
    [<Address object at 0x...>, <Person object at 0x...>, <Telephone object at 0x...>, <Telephone object at 0x...>]

Search by classname:

    >>> oc.by_class("Telephone")
    [<Telephone object at 0x...>, <Telephone object at 0x...>]
    >>> oc.by_class("Address")
    [<Address object at 0x...>]

Now search for some object attributes:

    >>> oc.by_attr("number", "22988912")
    [<Telephone object at 0x...>]
    >>> oc.by_attr("city", "Halle")
    [<Address object at 0x...>]
    >>> oc.by_attr("street", "")
    []
