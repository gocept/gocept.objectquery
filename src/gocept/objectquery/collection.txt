======================
Using ObjectCollection
======================

Imporing the ObjectCollection
=============================

You can import the QueryParser as follow:

    >>> from gocept.objectquery.collection import ObjectCollection

Get a ObjectCollection:

    >>> oc = ObjectCollection()

Using the ObjectCollection
==========================

First create some example classes. All have the attribute "id" which is like
an object counter for the number of equal named classes. The rest should be
self-explanatory.

    >>> class Telephone(object):
    ...     def __init__(self, id, number=""):
    ...         self.id = id
    ...         self.number = number
    ...     def __call__(self, id, number):
    ...         self.__init__(id, number)
    >>> class Person(object):
    ...     def __init__(self, id, name=""):
    ...         self.id = id
    ...         self.name = name
    ...     def __call__(self, id, name):
    ...         self.__init__(id, name)
    >>> class Address(object):
    ...     def __init__(self, id, street="", city=""):
    ...         self.id = id
    ...         self.street = street
    ...         self.city = city
    ...     def __call__(self, id, street, city):
    ...         self.__init__(id, street, city)

Add some objects to the collection:

    >>> oc.add(Telephone(0))
    >>> oc.add(Address(0, street="Meckelstr. 24", city="Halle"))
    >>> oc.add(Address(1))
    >>> oc.add(Person(0, name="Sebastian"))
    >>> oc.add(Address(2, street="Forsterstr. 29", city="Halle"))
    >>> oc.add(Telephone(1, number="+49345122988912"))
    >>> oc.all()
    [<Telephone object at 0x...>, <Address object at 0x...>, <Address object at 0x...>, <Person object at 0x...>, <Address object at 0x...>, <Telephone object at 0x...>]

Now use the init functionality:

    >>> oci = ObjectCollection([Telephone(0), Address(0)])
    >>> oci.all()
    [<Telephone object at 0x...>, <Address object at 0x...>]

Search by classname:

    >>> oc.by_class("Telephone")
    [<Telephone object at 0x...>, <Telephone object at 0x...>]
    >>> oc.by_class("Address")
    [<Address object at 0x...>, <Address object at 0x...>, <Address object at 0x...>]

Now search for some object attributes:

    >>> oc.by_attr("number", "+49345122988912")
    [<Telephone object at 0x...>]
    >>> oc.by_attr("city", "Halle")
    [<Address object at 0x...>, <Address object at 0x...>]
    >>> oc.by_attr("street", "")
    [<Address object at 0x...>]
    >>> oc.by_attr("id", 1)
    [<Address object at 0x...>, <Telephone object at 0x...>]
    >>> oc.by_attr("id", "")
    []

You may want to get some values:

    >>> oc.get_value("street")
    ['Meckelstr. 24', '', 'Forsterstr. 29']
    >>> oc.get_value("name")
    ['Sebastian']
