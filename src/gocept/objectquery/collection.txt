======================
Using ObjectCollection
======================

Initialization
==============

First we need a ZODB for the IndexSupport used by ObjectCollection:

    >>> from ZODB import FileStorage, DB
    >>> from persistent import Persistent
    >>> import transaction
    >>> storage = FileStorage.FileStorage('/tmp/test-collection.fs')
    >>> db = DB(storage)
    >>> conn = db.open()
    >>> dbroot = conn.root()

Purge old data:

    >>> dbroot.clear()
    >>> transaction.commit()

Then we need some testobjects, which we will store into the ObjectCollection:

    >>> import gocept.objectquery.testobjects as testobject

Imporing the ObjectCollection
=============================

You can import the QueryParser as follow:

    >>> from gocept.objectquery.collection import ObjectCollection

Get a ObjectCollection:

    >>> oc = ObjectCollection(conn)

Using the ObjectCollection
==========================

Example usage of ObjectCollection
---------------------------------

Add some objects to the collection:

    >>> t1 = testobject.Telephone(number="22988912")
    >>> t2 = testobject.Telephone(number="22988913")
    >>> p1 = testobject.Person(name="Sebastian", ref=[t1, t2])
    >>> a1 = testobject.Address(street="Meckelstrasse", city="Halle", ref=[p1])
    >>> dbroot['test'] = a1
    >>> transaction.commit()

    >>> oc.add(a1._p_oid)
    >>> oc.root() == a1
    True

Verify the indexes:

    >>> result = oc._classindex.get("Telephone")
    >>> conn.get(result[0])
    <gocept.objectquery.testobjects.Telephone object at 0x...>
    >>> conn.get(result[1])
    <gocept.objectquery.testobjects.Telephone object at 0x...>
    >>> result = oc._attributeindex.get("name")
    >>> conn.get(result[0])
    <gocept.objectquery.testobjects.Person object at 0x...>
    >>> conn.get(result[1])
    Traceback (most recent call last):
    ...
    IndexError: list index out of range
    >>> result = oc._structureindex.get(t1._p_oid)[0]
    >>> conn.get(result[0])
    <gocept.objectquery.testobjects.Address object at 0x...>
    >>> conn.get(result[1])
    <gocept.objectquery.testobjects.Person object at 0x...>
    >>> conn.get(result[2])
    <gocept.objectquery.testobjects.Telephone object at 0x...>


Search by classname:

    >>> oc.by_class("Telephone")
    [<gocept.objectquery.testobjects.Telephone object at 0x...>, <gocept.objectquery.testobjects.Telephone object at 0x...>]
    >>> oc.by_class("Address")
    [<gocept.objectquery.testobjects.Address object at 0x...>]

Now search for some object attributes:

    >>> oc.by_attr("number", "22988912")
    [<gocept.objectquery.testobjects.Telephone object at 0x...>]
    >>> oc.by_attr("city", "Halle")
    [<gocept.objectquery.testobjects.Address object at 0x...>]
    >>> oc.by_attr("street", "")
    []

Adding and removing objects:
----------------------------

Adding some more objects to ``oc``:

    >>> p2 = testobject.Person(name="Christian")
    >>> a1.ref.append(p2)
    >>> transaction.commit()

    >>> oc.add(p2._p_oid, a1._p_oid)
    >>> result = oc.by_class("Person")
    >>> result
    [<gocept.objectquery.testobjects.Person object at 0x...>, <gocept.objectquery.testobjects.Person object at 0x...>]
    >>> len(result)
    2

    >>> t3 = testobject.Telephone(number="2298891")
    >>> p2.ref.append(t3)
    >>> transaction.commit()

    >>> oc.add(t3._p_oid, p2._p_oid)
    >>> len(oc.by_class("Telephone"))
    3

    >>> p1.ref.append(t3)
    >>> transaction.commit()

    >>> oc.add(t3._p_oid, p1._p_oid)
    >>> len(oc.by_class("Telephone"))
    3
    >>> oc.is_child(t3._p_oid, p1._p_oid)
    True
    >>> oc.is_child(t3._p_oid, p2._p_oid)
    True

Successful removing:

    >>> oc.delete(t1._p_oid, p1._p_oid)
    >>> p1.ref.remove(t1)
    >>> transaction.commit()
    >>> len(oc.by_class("Telephone"))
    2

Removing objects which do exist under two or more parents does not result in
deletion of the object, if you specify one parent, under which the object
should be removed:

    >>> oc.delete(t3._p_oid, p1._p_oid)
    >>> p1.ref.remove(t3)
    >>> transaction.commit()
    >>> len(oc.by_class("Telephone"))
    2

Adding circles to collection
----------------------------

First we need a new ObjectCollection:

    >>> dbroot.clear()
    >>> transaction.commit()
    >>> oc3 = ObjectCollection(conn)

Then create two objects and add one under the other:

    >>> add = testobject.Address()
    >>> per = testobject.Person()

    >>> dbroot['test'] = add
    >>> transaction.commit()
    >>> oc3.add(add._p_oid)

    >>> add.ref.append(per)
    >>> transaction.commit()
    >>> oc3.add(per._p_oid, add._p_oid)

Adding add unter per will create a cycle, which is possible at all:

    >>> per.ref.append(add)
    >>> transaction.commit()
    >>> oc3.add(per._p_oid, add._p_oid)

To test the cycle, per should be a child of add and vice versa:

    >>> oc3.is_child(per._p_oid, add._p_oid)
    True
    >>> oc3.is_child(add._p_oid, per._p_oid)
    True
