================================
Parsing regular path expressions
================================

Import the QueryParser:

 >>> from gocept.objectquery.pathexpressions import QueryParser
 >>> p = QueryParser()

The Parser returns a data structure, which allows to recursively call the
Join-Functions with two parameters. Here a simple example, where we join the
element *foo* with the element *bar*:

 >>> p.parse('foo/bar')
 ['EEJOIN', ('ELEM', 'foo'), ('ELEM', 'bar')]

It is also possible, to join only one element:

 >>> p.parse('/foo')
 ['EEJOIN', None, ('ELEM', 'foo')]

Occurence works the same way: its an OCCJOIN with the occurence parameter
(+,?,*) and the element:

 >>> p.parse('/foo?')
 ['EEJOIN', None, ['OCCJOIN', ('OCC', '?'), ('ELEM', 'foo')]]
 >>> p.parse('foo*/bar')
 ['EEJOIN', ['OCCJOIN', ('OCC', '*'), ('ELEM', 'foo')], ('ELEM', 'bar')]

More Pathjoins work like a tree, where the leaves are the elements:

 >>> p.parse('foo/bar/bou')
 ['EEJOIN', ['EEJOIN', ('ELEM', 'foo'), ('ELEM', 'bar')], ('ELEM', 'bou')]

Attributes are parsed te same way: its an ATTR-Function with ID and VALUE as
parameters:

 >>> p.parse('foo/bar*[@a="b"]')
 ['EEJOIN', ('ELEM', 'foo'), ['EAJOIN', ['ATTR', ('ID', 'a'), ('VALUE', 'b')], ['OCCJOIN', ('OCC', '*'), ('ELEM', 'bar')]]]

Element can also be a wildcard:

 >>> p.parse('/_*/bar')
 ['EEJOIN', ['EEJOIN', None, ['OCCJOIN', ('OCC', '*'), ('WILDCARD', '_')]], ('ELEM', 'bar')]

To show the mightiness of the parser, here a more complex example:

 >>> p.parse('/foo[@a="b"]/_*/bar+[@a2="b2 b3"]/fou')
 ['EEJOIN', ['EEJOIN', ['EEJOIN', ['EEJOIN', None, ['EAJOIN', ['ATTR', ('ID', 'a'), ('VALUE', 'b')], ('ELEM', 'foo')]], ['OCCJOIN', ('OCC', '*'), ('WILDCARD', '_')]], ['EAJOIN', ['ATTR', ('ID', 'a2'), ('VALUE', 'b2 b3')], ['OCCJOIN', ('OCC', '+'), ('ELEM', 'bar')]]], ('ELEM', 'fou')]

You may also provide precedence by using round brackets and UNIONs:

 >>> p.parse('foo|(bar/boo)')
 ['UNION', ('ELEM', 'foo'), ['EEJOIN', ('ELEM', 'bar'), ('ELEM', 'boo')]]
 >>> p.parse('(foo/bar)|boo')

Some negative RPE-Tests:

 >>> p.parse('')
 Traceback (most recent call last):
 ...
 SyntaxError: ...
 >>> p.parse('/')
 Traceback (most recent call last):
 ...
 SyntaxError: ...
 >>> p.parse('foo/')
 Traceback (most recent call last):
 ...
 SyntaxError: ...
 >>> p.parse('foo[a="v"]')
 Traceback (most recent call last):
 ...
 SyntaxError: ...
 >>> p.parse('((abc/def)|(ghi/jkl)')
 Traceback (most recent call last):
 ...
 SyntaxError: ...
